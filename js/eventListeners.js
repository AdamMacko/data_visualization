import * as config from "./config.js";
import { processJSON ,handleFileUpload,toggleLED,drawCharts,handleSizeChange} from "./main.js"; 
import { changeSpeed } from "./animation.js";
import * as storage from "./storage.js";

/**
 * Inicializ√°cia v≈°etk√Ωch event listenerov
 */
export function initEventListeners() {
    console.log("üîó Event listenery inicializovan√©!");
// Prep√≠nanie menu pre v√Ωber poschodia
config.btnChangeFloor?.addEventListener("click", (event) => {
    event.stopPropagation();
    config.floorMenu.style.display =
        (config.floorMenu.style.display === "block") ? "none" : "block";
});

document.getElementById("openModal").addEventListener("click", function() {
    document.getElementById("myModal").style.display = "flex";
    
    // Poƒçkaj chv√≠ƒæu, k√Ωm sa modal zobraz√≠, a potom vykresli grafy
    setTimeout(() => {
        drawCharts();
    }, 100); // M√¥≈æe≈° zmeni≈• hodnotu, ak sa grafy nenaƒç√≠taj√∫ spr√°vne
});


document.getElementById("myModal").addEventListener("click", function(event) {
    if (event.target === this || event.target.classList.contains("close")) {
        this.style.display = "none";
    }
});

// Event listener pre tlaƒçidl√° poschod√≠
config.floorButtons.forEach(button => {
    button.addEventListener("click", function () {
        // Preƒç√≠tame ƒç√≠slo poschodia z textContent tlaƒçidla.
        let floor = parseInt(this.textContent);
        // Aktualizujeme currentFloor v glob√°lnom stave
        config.state.currentFloor = floor;
       
        
        // Skryjeme menu s tlaƒçidlami poschod√≠
        config.floorMenu.style.display = "none";
        
        // Ak m√°te definovan√© floorplany v routeData alebo v floorPlans,
        // zist√≠me spr√°vny floorplan pre dan√© poschodie.
        let floorplan = null;
        // Napr√≠klad, ak m√°te aspo≈à jednu akt√≠vnu trasu, sk√∫ste z nej z√≠ska≈• floorplan:
        if (config.state.activeRoutes.length > 0) {
            let activeRoute = config.state.activeRoutes[0];
            if (storage.routeData[activeRoute] && storage.routeData[activeRoute][floor] && storage.routeData[activeRoute][floor].floorplan) {
                floorplan = storage.routeData[activeRoute][floor].floorplan;
            }
        }
        // Ak floorplan nie je n√°jden√Ω, sk√∫ste pou≈æi≈• manu√°lne ulo≈æen√© floorPlans
        if (!floorplan) {
            floorplan = config.state.floorPlans[floor];
        }
        // Ak ani tam nie je, pou≈æijeme predvolen√Ω obr√°zok
        if (!floorplan) {
            floorplan = "images/background.png";
        }
        
        config.floorplanImage.setAttribute("href", floorplan);
        console.log(`Aktu√°lne poschodie nastaven√© na ${floor}.`);
        
        // Ak m√°te funkciu setFloor, ktor√° zobrazuje body podƒæa poschodia,
        // m√¥≈æete ju tie≈æ zavola≈• a posla≈• state.currentFloor.
        if (typeof setFloor === "function") {
            setFloor(config.state.currentFloor);
        }
    });
});

// Kliknut√≠m mimo menu skryjeme floorMenu
document.addEventListener("click", (event) => {
    if (!config.btnChangeFloor.contains(event.target) && !config.floorMenu.contains(event.target)) {
        config.floorMenu.style.display = "none";
    }
});
/** === üìå UPLOAD MAPY === */
config.btnUploadMap?.addEventListener("click", () => config.map.click());

config.map?.addEventListener("change", (event) => {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = (e) => {
        config.floorplanImage.setAttribute("href", e.target.result);
    };
    reader.readAsDataURL(file);
});


document.getElementById("btn-upload-json")?.addEventListener("click", () => {
    document.getElementById("jsonFileInput").click();
});

document.getElementById("jsonFileInput")?.addEventListener("change", (event) => {
    const file = event.target.files[0];
    if (!file) {
        console.log("Nebol vybran√Ω ≈æiadny s√∫bor.");
        return;
    }
    
    console.log(`Vybran√Ω s√∫bor: ${file.name}`);
    
    const reader = new FileReader();
    reader.onload = function (e) {
        try {
            const jsonData = JSON.parse(e.target.result);
            console.log("JSON d√°ta √∫spe≈°ne parsovan√©:", jsonData);
            
            // Skontrolujeme, ƒçi m√°me aspo≈à jednu akt√≠vnu trasu v config.state.activeRoutes
            if (!config.state.activeRoutes || config.state.activeRoutes.length === 0) {
                console.log("≈Ωiadna akt√≠vna trasa nebola vybran√°. JSON sa nespracuje.");
                return;
            }
            
            console.log("Akt√≠vne trasy:", config.state.activeRoutes);
            
            // Pre ka≈æd√∫ akt√≠vnu trasu zavol√°me processJSON, ak e≈°te d√°ta nie s√∫ naƒç√≠tan√©
            config.state.activeRoutes.forEach(routeId => {
                if (!storage.routeData[routeId].loaded) {
                    console.log(`Spracov√°vam JSON pre trasu: ${routeId}`);
                    processJSON(jsonData, routeId);
                } else {
                    console.log(`D√°ta pre trasu ${routeId} u≈æ boli naƒç√≠tan√©.`);
                }
            });
            
        } catch (error) {
            console.error("‚ùå Chyba pri parsovan√≠ JSON:", error);
        }
    };
    reader.readAsText(file);
});
    

    document.getElementById("btn-upload-txt")?.addEventListener("click", () => {
        document.getElementById("txtFileInput").click();
    });

    document.getElementById("txtFileInput")?.addEventListener("change", (event) => handleFileUpload(event, "txt"));

    /** === üìå OVL√ÅDACIE PRVKY === */
    config.buttons?.delete?.addEventListener("click", () => removePoint());

    config.buttons?.update?.addEventListener("click", (event) => {
        event.stopPropagation();
        config.editPointMenu.classList.toggle("show");
    });

    document.addEventListener("click", (event) => {
        if (!event.target.closest("#edit-point-menu") && !event.target.closest("#btn-update-circle")) {
            config.editPointMenu.classList.remove("show");
        }
    });

    config.buttons?.add?.addEventListener("click", () => {
        config.state.isAddingPoint = !config.state.isAddingPoint;
        config.buttons.add.innerHTML = config.state.isAddingPoint
            ? `<span class="material-symbols-outlined">close</span> Zru≈°i≈• prid√°vanie bodov`
            : `<span class="material-symbols-outlined">add</span> Prida≈• bod`;
        config.buttons.add.classList.toggle("active", config.state.isAddingPoint);
    });

    /** === üìå ZMENA R√ùCHLOSTI ANIM√ÅCIE === */
    if (config.decreaseSpeedButton && config.increaseSpeedButton) {
        config.decreaseSpeedButton.addEventListener("click", () => changeSpeed(-250));
        config.increaseSpeedButton.addEventListener("click", () => changeSpeed(250));
    } else {
        console.error("‚ùå decreaseSpeedButton alebo increaseSpeedButton neboli n√°jden√©!");
    }

 

    config.sizeSlider?.addEventListener("input", handleSizeChange);

    config.buttons.red.addEventListener("click", () => toggleLED("red"));
    config.buttons.green.addEventListener("click", () => toggleLED("green"));
    config.buttons.blue.addEventListener("click", () => toggleLED("blue"));
    config.buttons.yellow.addEventListener("click", () => toggleLED("yellow"));

    console.log("‚úÖ Event listenery boli √∫spe≈°ne nastaven√©!");
}
